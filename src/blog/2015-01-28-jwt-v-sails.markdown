---
layout: post
title: "JWT в Sails"
date: "2015-01-28 23:12:42 +0300"
comments: true
categories:
---

Рассмотрим пример архитектуры, когда мы имеем реализацию, где Sails выступает в
качестве API бэкенда, а клиентская часть — это отдельное AngularJS приложение, работающие
с API Sails.

<!--more-->

Для начала надо создать механизм обработки кодирования и декодирования:

{% gist bc7ea80491cfbf5439a8 sailsTokenAuth.js %}

Мы эскпортируем две функции, одну, которая будет назначать токен, а другая проверять. В этих функциях видим, как передаём полезную нагрузку и токен. Советуется держать секретные данные в переменной, что лучше, чем в простой строке. Также длинную случайную строку сложнее взломать.

Как устроен контроллер:

Метод аунтефикации:

{% gist 605d88d09aa271038e75 AuthController.js %}

Мы проверяем, что данные переданы, потом ищем пользователя и вызываем функцию валидации, чтобы проверить комбинацию пользователь/пароль. И если наши данные верны, мы назначаем токен, используя user.id как полезную нагрузку и также передаем полного пользователя в json.

И так: мы передаем наши данные > проверяем их и если они впорядке > мы получаем нашего пользователя и токен в json.

Метод регистрации:

{% gist d35ade0b70c1eb130d3e AuthController.js %}

Мы просто создаем пользователя с новыми данными и если они валидны, то назначаем токен. Это делается для того, чтобы пользователю не пришлось заново логиниться после регистрации.

Как обрабатываются входящие запросы? У Sails есть концепт, который называется политиками, которые используются как посредники, которые запускаются перед контроллерами. Там можно проверять токен:

{% gist ce7b7a062dbc1fea61b4 tokenAuth.js %}

В начале мы проверяем, есть ли у нас токен в хедере информация об авторизацие и потом записываем его. Так же проверяется не был ли передан параметром в адресной строке.

Когда у нас наконец есть токен, мы просто проверяем его, извлекаем полезную нагрузку и присваиваем её req.token, чтобы потом можно было получить доступ из контроллера. Если токена нет, то передаем ошибку.

Теперь, когда мы имеем токен мы можем выполнить, например:

{% gist cbe16948bfd344c69470 index.js %}

С тех пор, как наш такен — это user id, то мы может использовать его везде, где необходимо.

Больше нечего добавить. Нужно просто добавить библиотеку, которая будет шифровать/расшифровывать токен и назначать его при регистрации или логине и проверять его существование перед каждым запросом.

Original source: http://angular-tips.com/blog/2014/05/json-web-tokens-examples/

---
layout: post
title: "Работа с шаблонами и ресурсами в Sails"
date: "2015-01-22 19:02:08 +0300"
comments: true
categories:
---

Sails очень похож на Rails и работает он соответственно по тому же принципу, то есть отвечает MVC.

<!--more-->

По умолчанию в Sails шаблоны рендерятся на сервере. Этот подход характерезует V в MVC архитектуре.

Так называемый серверный рендеринг представляет собой обработку сервером разметки, обычно, включающей в себя HTML, CSS и Javascript и применение даты в выбранном шаблонизаторе.  Все шаблонизаторы используют таги, которые окружают переменные и потом будут обработаны в данные. По умолчанию Sails использует шаблонизатор EJS.

{% gist 5736fc09d6a261797b7a %}

Когда Sails обрабатывает шаблон, то будет предпринята попытка заменить все переменные соответствующим значением.

### Как работает серверная обработка шаблонов

Когда клиент делает запрос на сервер, то роутер обрабатывает этот запрос и определяет куда его направить. Результирующий роут обычно направляет на controller/action, где будет выполнена какая-нибудь логика. Например, логикой может быть доступ к mongo базе данных, чтобы получить какие-нибудь данные, которые потом будут переданы в шаблон, который и будет отправлен клиенту и отображен браузером.

Этот традиционный подход имеет по крайней мере два недостатка. Чтобы обновить данные на странице нужно постоянно полностью перегружать страницу. Второй недостаток в том, что API становится менее гибким так как привязан к шаблону.

Более современный подход построения веб-приложений заключается в передаче управления UI на клиента, так же как и отделение API, чтобы он представлял только конечные точки и был независимым поставщиком данных. И доступ к конечным точкам мог бы получить UI холодильника, часов, смартфона и т.п.

По умолчанию Sails генерирует три файла homepage.ejs, layout.ejs и роут к главной странице в config/route.js. Когда мы делаем запрос в браузере на localhost:1337, то Sails роутер смотрим на запрос и сопоставляет его с роутом в файле (route.js). Это задействует обработку шаблона layout.ejs с homepage.ejs, чтобы отобразить его в браузере. Layout.еjs здесь является надстройкой над homepage.ejs, который вставляется в шаблон на месте переменной body.

Чтобы отключить эту функциональность в шаблонах надо изменить значение опции layout на false в файле /config/views.js.

### Немного подробнее о лэйаутах в Sails.

Когда мы делаем приложения, которые имею много разных страницы, то может быть полезным выделить разметку, которая используется несколькими страницами в лэйаут. Это уменьшит количество кода в проекте и поможет избежать правок в одних и тех же местах.

Sails идет с поддержкой лэйаутов, когда используется, встроенный по умолчанию, шаблонизатор ejs.

Если вы захотите заменить ваш шаблонизатор на другой. То вам нужно будет использовать npm. Например, вы захотели переключиться на jade.

`run npm install jade --save-dev`

И потом просто меняете опцию engine на jade в config/views.js.
Sails поддерживает много [шаблонизаторов](http://sailsjs.org/#/documentation/concepts/Views/ViewEngines.html). А также можно попробовать добавить [свои](https://github.com/tj/consolidate.js/blob/master/Readme.md#api).

### Создание лэйаутов

Sails лэйауты - это специальные .ejs файлы в папке views, в которые вы можете обернуть другие ваши шаблоны. Лэйауты обычно содержат преамбулы ( напимер, e.g. !DOCTYPE html<html><head>....</head><body>) и т.п. Лэйауты никогда не используются без шаблона, который вставляется в лэйаут.

Настройка лэйаута может быть сконфигурирована или отключена в config/views.js, также может быть настроен специальный роут и действие, используя специальную переменную layout. По умолчанию все шаблоны в приложение будут использовать лэйаут, располагающийся в views/layout.js.

Важно иметь в виде, что в Express 3 убрали поддержку лэйаутов и Sails делает обратную совместимость с Express 2. https://github.com/balderdashy/sails/issues/494

### Обработка ресурсов в Sails

Допустим мы создаем страницу аутентификации в гибридном приложение и нам нужно подключить необходимый нам фреймворк, например, Angular.

У Sails есть автоматический механизм для доступа к файлам, например, файлы Angular можно подключить поместив их в специальные теги:

<!--SCRIPTS-->
<!--SCRIPTS END-->

Добавление файлов между этими тегами происходит с помощью специальной Grunt задачи, который будет находить файлы с соответствующими именами в assets/js. По умалчанию Sails будет вставлять сначала файлы из /assets/js/dependencies/, а затем из /assets/js.

Порядок подключения файлов содержится в файле tasks/pipeline.js.

Тоже самое характерно и для стилей.

<!--STYLES-->
<!--STYLES END-->

В общем, файлопровод  в Sails - это набор задач Grunt.

Вот небольшой список того, что Sails позволяет делать по умолчанию с файлами:

- Автоматическая компиляция LESS
- Автоматическая компиляция JST
- Автоматическая компиляция Coffescript
- Автоматическая вставка, минификация и конкатенация ресурсов
- Создание продакшен файлов
- Синхронизация и наблюдение за файлами
- Оптимизация файлов в продакшене

Более [подробно про Grunt задачи в Sails](https://github.com/irlnathan/s-grunt-docs/blob/master/overview.md)

Grunt можно легко отключить выставив в .sailsrc опции grunt  false. В этом файле содержатся важные глобальные настройки всего приложения. И выполняя какие-либо команды, в первую очередь будет проверяться именное этот файл.

Если нужен, к примеру, Sass, то легко создать соответствующую Grunt задачу. Все задачи находятся в папке tasks/.

А что еще лучше, так это то, что можно [создать отдельный генератор](https://github.com/balderdashy/sails-generate-generator), который будет позволять создать нужную структуру.

Написано на основе SailsCasts.

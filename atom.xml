<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pavel Demyanenko]]></title>
  <link href="http://paveldemyanenko.github.io/atom.xml" rel="self"/>
  <link href="http://paveldemyanenko.github.io/"/>
  <updated>2015-01-08T07:16:04+03:00</updated>
  <id>http://paveldemyanenko.github.io/</id>
  <author>
    <name><![CDATA[Pavel Demyanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sails Blueprint API]]></title>
    <link href="http://paveldemyanenko.github.io/blog/2015/01/07/sails-blueprint-api/"/>
    <updated>2015-01-07T22:52:43+03:00</updated>
    <id>http://paveldemyanenko.github.io/blog/2015/01/07/sails-blueprint-api</id>
    <content type="html"><![CDATA[<p>Blueprint API состоит из blueprint routes и blueprint actions, которые создают логику для <a href="https://ru.wikipedia.org/wiki/REST">RESTful JSON API</a> каждый раз, когда создается модель и контроллер.</p>

<p>Например, если создать модель пользователя и соответствующий контроллер в проекте, то blueprint api позволит сразу создать пользователя /user/create?name=vanya и просмотреть массив созданных пользователей /user, не написав для этого ни одной строчки кода.</p>

<p>Blueprints удобно использовать при прототипирование, но и в продакшене тоже являются сильным инструментом так как могут быть расширены.</p>

<!--more-->


<h3>Blueprint Routes</h3>

<p>Когда запускается приложение с помощью <code>sails lift</code> и blueprints включены, то фреймворк инспектирует ваши контроллеры, модели и конфигурации, чтобы назанчить необходимые роуты автоматически. Эти неявные роуты (иногда называемые &ldquo;тени&rdquo;) позволяют приложению реагировать на те или иные запросы без необходимости привязки этих роутов вручную в сonfig/routes.js файле. По умолчанию &ldquo;тени&rdquo; указывают на соответствующие действий (см. &ldquo;blueprint actions&rdquo; ниже), любое из которых может быть переопределенно своим кодом.</p>

<p>Есть три вида blueprint роутов в Sails:</p>

<p><strong>RESTful routes</strong>, когда роут всегда /:modelIdentity или /:modelIdentity/:id. Эти роуты использует HTTP методы POST, DELETE и так далее.</p>

<p><strong>Shortcut routes</strong>, когда действие содержится в роуте. Например, /user/create?name=vanya создаст нового пользователя, в то время как user/update/1?name=pavel обновит запись для первого пользователя. Эти роуты отвечают только на GET запросы. Полезная фича для дева, но в продакшене лучше выключить.</p>

<p><strong>Action routes</strong>, которые автоматически создаются для кастомных контроллеров. Например, есть контроллер FooController.js с bar методом, тогда роут /foo/bar будет автоматически создан, если blueprints включены. В отличие от остальных типов роутов эти не требуют, чтобы у контроллера была соответствующая модель.</p>

<p><a href="http://sailsjs.org/#/documentation/reference/sails.config/sails.config.blueprints.html">Подраздел конфигураций</a>, в том числе, как включить/отключить различные роуты.</p>

<h3>Blueprint Actions</h3>

<p>Blueprint actions (не путать с blueprint action routes) — это общие методы, направленные на работу с любым контроллером, который имеет модель с таким же именем. Можно думать о них, как о поведение по умолчанию для приложения. Например, если существует модель User.js и соответствующий контроллер UserController.js, то методы create, update, find, destroy, populate, add, remove будут доступны без необходимости писать их.</p>

<p>По умолчанию RESTful routes и shortcut routes привязаны к соответствующим общим методам. Тем не менее, любой такой метод может быть переопределен для конкретного контроллера путем создания этого метода в файле контроллера (FooController.find). Кроме того можно переопределить методы во всем приложение, создав кастомные методы (api/blueprints/create.js).</p>

<p>Текущая версия Sails поддерживает следующие методы:</p>

<ol>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Find.html">find</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/FindOne.html">findOne</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Create.html">create</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Update.html">update</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Destroy.html">destroy</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Populate.html">populate</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Add.html">add</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Remove.html">remove</a></li>
</ol>


<p>Расмотренные методы blueprint API один в один, как методы выше.</p>

<h3>Переопределение blueprints</h3>

<p>Чтобы переопределить blueprints в Sails v0.10 можно создать папку api/blueprints и добавить туда свои файлы (например, find.js, create.js и т.п). Можно посмотреть на код по умолчанию для начала.</p>

<p><strong>Важно</strong>: Все файлы должны быть в нижнем регистре! По умолчанию действия, например, findOne.js, но в /api/blueprints должны быть findone.js.</p>

<p>Добавление пользовательских blueprint также поддерживаются, но они в настоящее время не получают автоматическую привязку к роутам. Если создаеть /blueprints/foo.js файл, то нужно связать роуты до него в /config/routes.js файле, например:</p>

<p>GET /myRoute&#8217;: {blueprint: &lsquo;foo&rsquo;}</p>

<p>Отключение blueprints контроллера:</p>

<p>Также можно переопределить любые настройки из config/blueprints.js для каждого контроллера путем осоздания объекта _config в контроллере и присвоение ему конфигурации с переопределением настроек.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module.exports = {
</span><span class='line'>  _config: {
</span><span class='line'>    actions: false,
</span><span class='line'>    shortcuts: false,
</span><span class='line'>    rest: false
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pavel Demyanenko]]></title>
  <link href="http://paveldemyanenko.github.io/atom.xml" rel="self"/>
  <link href="http://paveldemyanenko.github.io/"/>
  <updated>2015-01-28T23:13:20+03:00</updated>
  <id>http://paveldemyanenko.github.io/</id>
  <author>
    <name><![CDATA[Pavel Demyanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JWT в Sails]]></title>
    <link href="http://paveldemyanenko.github.io/blog/2015/01/28/jwt-v-sails/"/>
    <updated>2015-01-28T23:12:42+03:00</updated>
    <id>http://paveldemyanenko.github.io/blog/2015/01/28/jwt-v-sails</id>
    <content type="html"><![CDATA[<p>TODO: using JWT in Sails with Angularjs</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ауентификация с JSON Web Tokens]]></title>
    <link href="http://paveldemyanenko.github.io/blog/2015/01/27/json-web-tokens/"/>
    <updated>2015-01-27T20:50:32+03:00</updated>
    <id>http://paveldemyanenko.github.io/blog/2015/01/27/json-web-tokens</id>
    <content type="html"><![CDATA[<p>Ауентификация c JWT не нуждается в сессиях, не имеет проблем с мобильными устройствами, не нуждается в CSRF и прекрасно работает с CORS. Но как это всё работает?</p>

<!--more-->


<p>Представьте себе самое стандартное веб-приложение, вы ходите по страницам и решаете зарегистрироваться. Потом вы начинаете заполнять ваши данные в необходимой форме. И в ответ вы получите JSON токен. Что же можно делать с этим токеном. Например, вы можете получить функционал зарегистрированного пользователя (личные сообщения, страница профиля и т.п).</p>

<h3>Как работает JWT</h3>

<p>Теперь вы имеете примерное представление о том, как работает JWT. Рассмотрим этот процесс с технической точки зрения.</p>

<p>JWToken самодостаточен и поэтому и когда вы создаёте его он будет иметь все необходимые части внутри себя. Чтоже это за кусочки? Токен разделён на три части: хеддер, необходимый контент и подпись.</p>

<p>Хеддер обычно содержит две вещи: тип токена и имя алгоритм. Например, {typ: &lsquo;JWT&rsquo;, alg: &lsquo;HS256&rsquo;}. Это зашифровывается в base64.</p>

<p>Необходимый контент — это информация, которую вы хотите передать в токен, например, {user: 2} или даже {user: 2, admin: true}. Это зашифровывается в base64.</p>

<p>Для подписы мы берём закодированный хеддер, закодированный контент, секретый ключ, который мы предоставляем, алгоритм, указанный в хеддере и подписываем это.</p>

<p>В конце концов мы получаем токен в виде: xxxxxxxxxxx.yyyy.zzzzzzzzzzzz, где x — это закодированный хеддер, y — контент, а z — подпись.</p>

<p>Возвращаясь к примеру. Когда мы логинимся, мы получаем токет и с этим логином мы можем делать любой запрос к серверу просто передавая ему наш токен (обычно в хеддере). Как же происходит работа с токеном на сервере, если у нас нет сессий и мы не записываем токен в базу данных? Как мы идентифицируем пользователя?</p>

<p>Когда мы делаем запрос, то мы посылаем токен на сервер. Там мы его расшифровываем, обычно с помощью библиотеки, которая сделает расшифровку контента и хеддера, чтобы посмотреть тип и используемый алгоритм. Произойдет варификация данных с подписью и если всё впорядке будет возвращен контент. Так как в контенте может быть user_id, то мы сможем сделать запрос к базе данных с этим пользователем.</p>

<p>Значит порядок таков: я логинюсь -> я получаю токен -> я делаю запрос со своим токеном -> токен расшифровывается -> с полученным user_id происходит запрос на данные, возвращаемые, например, в виде JSON.</p>

<p>Что будет, если попробывать подменить контент и скормить серверу ложный параметр? Это не сработает. Подпись токена, состоит из оригинального хеддера и контента.</p>

<p>Есть еще кое-что важное для продвинутых пользователей. Например node позволяет нам задать время действия токена (руби не позволяет пока что), которое будет сохранено в контенте. Это полезно, например, для того, чтобы заставить пользоваться перезайти черех X дней.</p>

<p>В заключение, надо замеить, что с таким подходом лучше использовать SSL, так как токен будет передаваться каждый раз при запросах.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Работа с шаблонами и ресурсами в Sails]]></title>
    <link href="http://paveldemyanenko.github.io/blog/2015/01/22/rabota-s-shablonami-i-riesursami-v-sails/"/>
    <updated>2015-01-22T19:02:08+03:00</updated>
    <id>http://paveldemyanenko.github.io/blog/2015/01/22/rabota-s-shablonami-i-riesursami-v-sails</id>
    <content type="html"><![CDATA[<p>Sails очень похож на Rails и работает он соответственно по тому же принципу, то есть отвечает MVC.</p>

<!--more-->


<p>По умолчанию в Sails шаблоны рендерятся на сервере. Этот подход характерезует V в MVC архитектуре.</p>

<p>Так называемый серверный рендеринг представляет собой обработку сервером разметки, обычно, включающей в себя HTML, CSS и Javascript и применение даты в выбранном шаблонизаторе.  Все шаблонизаторы используют таги, которые окружают переменные и потом будут обработаны в данные. По умолчанию Sails использует шаблонизатор EJS.</p>

<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>ejs exmapl</span><a class='code-highlight-caption-link' href='https://gist.github.com/5736fc09d6a261797b7a'>link</a></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'>&lt;!DOCTYPE html>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>&lt;html>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>  &lt;head>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>    &lt;title>&lt;%- title %>&lt;/title>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>  &lt;/head>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>  &hellip;</div></div></pre></div></figure></p>

<p>Когда Sails обрабатывает шаблон, то будет предпринята попытка заменить все переменные соответствующим значением.</p>

<h3>Как работает серверная обработка шаблонов</h3>

<p>Когда клиент делает запрос на сервер, то роутер обрабатывает этот запрос и определяет куда его направить. Результирующий роут обычно направляет на controller/action, где будет выполнена какая-нибудь логика. Например, логикой может быть доступ к mongo базе данных, чтобы получить какие-нибудь данные, которые потом будут переданы в шаблон, который и будет отправлен клиенту и отображен браузером.</p>

<p>Этот традиционный подход имеет по крайней мере два недостатка. Чтобы обновить данные на странице нужно постоянно полностью перегружать страницу. Второй недостаток в том, что API становится менее гибким так как привязан к шаблону.</p>

<p>Более современный подход построения веб-приложений заключается в передаче управления UI на клиента, так же как и отделение API, чтобы он представлял только конечные точки и был независимым поставщиком данных. И доступ к конечным точкам мог бы получить UI холодильника, часов, смартфона и т.п.</p>

<p>По умолчанию Sails генерирует три файла homepage.ejs, layout.ejs и роут к главной странице в config/route.js. Когда мы делаем запрос в браузере на localhost:1337, то Sails роутер смотрим на запрос и сопоставляет его с роутом в файле (route.js). Это задействует обработку шаблона layout.ejs с homepage.ejs, чтобы отобразить его в браузере. Layout.еjs здесь является надстройкой над homepage.ejs, который вставляется в шаблон на месте переменной body.</p>

<p>Чтобы отключить эту функциональность в шаблонах надо изменить значение опции layout на false в файле /config/views.js.</p>

<h3>Немного подробнее о лэйаутах в Sails.</h3>

<p>Когда мы делаем приложения, которые имею много разных страницы, то может быть полезным выделить разметку, которая используется несколькими страницами в лэйаут. Это уменьшит количество кода в проекте и поможет избежать правок в одних и тех же местах.</p>

<p>Sails идет с поддержкой лэйаутов, когда используется, встроенный по умолчанию, шаблонизатор ejs.</p>

<p>Если вы захотите заменить ваш шаблонизатор на другой. То вам нужно будет использовать npm. Например, вы захотели переключиться на jade.</p>

<p><code>run npm install jade --save-dev</code></p>

<p>И потом просто меняете опцию engine на jade в config/views.js.
Sails поддерживает много <a href="http://sailsjs.org/#/documentation/concepts/Views/ViewEngines.html">шаблонизаторов</a>. А также можно попробовать добавить <a href="https://github.com/tj/consolidate.js/blob/master/Readme.md#api">свои</a>.</p>

<h3>Создание лэйаутов</h3>

<p>Sails лэйауты - это специальные .ejs файлы в папке views, в которые вы можете обернуть другие ваши шаблоны. Лэйауты обычно содержат преамбулы ( напимер, e.g. !DOCTYPE html<html><head>&hellip;.</head><body>) и т.п. Лэйауты никогда не используются без шаблона, который вставляется в лэйаут.</p>

<p>Настройка лэйаута может быть сконфигурирована или отключена в config/views.js, также может быть настроен специальный роут и действие, используя специальную переменную layout. По умолчанию все шаблоны в приложение будут использовать лэйаут, располагающийся в views/layout.js.</p>

<p>Важно иметь в виде, что в Express 3 убрали поддержку лэйаутов и Sails делает обратную совместимость с Express 2. <a href="https://github.com/balderdashy/sails/issues/494">https://github.com/balderdashy/sails/issues/494</a></p>

<h3>Обработка ресурсов в Sails</h3>

<p>Допустим мы создаем страницу аутентификации в гибридном приложение и нам нужно подключить необходимый нам фреймворк, например, Angular.</p>

<p>У Sails есть автоматический механизм для доступа к файлам, например, файлы Angular можно подключить поместив их в специальные теги:</p>

<!--SCRIPTS-->


<!--SCRIPTS END-->


<p>Добавление файлов между этими тегами происходит с помощью специальной Grunt задачи, который будет находить файлы с соответствующими именами в assets/js. По умалчанию Sails будет вставлять сначала файлы из /assets/js/dependencies/, а затем из /assets/js.</p>

<p>Порядок подключения файлов содержится в файле tasks/pipeline.js.</p>

<p>Тоже самое характерно и для стилей.</p>

<!--STYLES-->


<!--STYLES END-->


<p>В общем, файлопровод  в Sails - это набор задач Grunt.</p>

<p>Вот небольшой список того, что Sails позволяет делать по умолчанию с файлами:</p>

<ul>
<li>Автоматическая компиляция LESS</li>
<li>Автоматическая компиляция JST</li>
<li>Автоматическая компиляция Coffescript</li>
<li>Автоматическая вставка, минификация и конкатенация ресурсов</li>
<li>Создание продакшен файлов</li>
<li>Синхронизация и наблюдение за файлами</li>
<li>Оптимизация файлов в продакшене</li>
</ul>


<p>Более <a href="https://github.com/irlnathan/s-grunt-docs/blob/master/overview.md">подробно про Grunt задачи в Sails</a></p>

<p>Grunt можно легко отключить выставив в .sailsrc опции grunt  false. В этом файле содержатся важные глобальные настройки всего приложения. И выполняя какие-либо команды, в первую очередь будет проверяться именное этот файл.</p>

<p>Если нужен, к примеру, Sass, то легко создать соответствующую Grunt задачу. Все задачи находятся в папке tasks/.</p>

<p>А что еще лучше, так это то, что можно <a href="https://github.com/balderdashy/sails-generate-generator">создать отдельный генератор</a>, который будет позволять создать нужную структуру.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Приквел к Sails]]></title>
    <link href="http://paveldemyanenko.github.io/blog/2015/01/11/prikviel-k-sails/"/>
    <updated>2015-01-11T20:50:46+03:00</updated>
    <id>http://paveldemyanenko.github.io/blog/2015/01/11/prikviel-k-sails</id>
    <content type="html"><![CDATA[<p>Sails спроектирован так, чтобы быть похожим на фреймворк Ruby on Rails, но направленный на нужды современных приложений: data-driven API с масштабируемой архитектурой. Этот фреймворк особенно хорош для чатов, игр и для всего того, что работает в режиме реального времени. Можно, конечно, использовать и для любых других типов веб приложений. Чтобы понять почему это всё может пригодиться,  надо понять как устроена экосистема node.js проектов.</p>

<!--more-->


<p>Примерная схема работы в Node.js включает в себя создание веб-сервера, роутера и контроллеров.
Важно понимать, что Node.js сам по себе не делает ничего «из коробки». Один из встроенных модулей позволяет без особых усилий создать простой HTTP-сервер. Другой, за работу с url и т.п. Ниже продемострирована такая схема создания проекта на Node.js.</p>

<figure class='code'><figcaption><span>server.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;url&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">example</span><span class="p">(</span><span class="nx">route</span><span class="p">,</span> <span class="nx">routes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">onRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">pathname</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">pathname</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Request for &quot;</span> <span class="o">+</span> <span class="nx">pathname</span> <span class="o">+</span> <span class="s2">&quot; recieved.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">route</span><span class="p">(</span><span class="nx">pathname</span><span class="p">,</span> <span class="nx">routes</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">onRequest</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Server running at http://127.0.0.1:1337/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">example</span> <span class="o">=</span> <span class="nx">example</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>router.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">route</span><span class="p">(</span><span class="nx">pathname</span><span class="p">,</span> <span class="nx">routes</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;About to route a request for &quot;</span> <span class="o">+</span> <span class="nx">pathname</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">routes</span><span class="p">[</span><span class="nx">pathname</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">routes</span><span class="p">[</span><span class="nx">pathname</span><span class="p">](</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;No request found for &quot;</span> <span class="o">+</span> <span class="nx">pathname</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">route</span> <span class="o">=</span> <span class="nx">route</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>controller.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">index</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Action index was called&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Content-type&quot;</span><span class="o">:</span> <span class="s2">&quot;text/plain&quot;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">user1</span><span class="o">:</span> <span class="s2">&quot;Jack White&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user2</span><span class="o">:</span> <span class="s2">&quot;Jack Black&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user3</span><span class="o">:</span> <span class="s2">&quot;Jack Grey&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">user</span> <span class="k">in</span> <span class="nx">users</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">users</span><span class="p">[</span><span class="nx">user</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">users</span><span class="p">[</span><span class="nx">user</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">show</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Action show was called&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Content-type&quot;</span><span class="o">:</span> <span class="s2">&quot;text/plain&quot;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">user1</span><span class="o">:</span> <span class="s2">&quot;Jack White&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user2</span><span class="o">:</span> <span class="s2">&quot;Jack Black&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user3</span><span class="o">:</span> <span class="s2">&quot;Jack Grey&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">users</span><span class="p">[</span><span class="nx">user1</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="nx">index</span><span class="p">;</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">show</span> <span class="o">=</span> <span class="nx">show</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><figure class='code-highlight-figure'><figcaption class='code-highlight-caption'><span class='code-highlight-caption-title'>router.js</span><a class='code-highlight-caption-link' href='https://gist.github.com/e2cddca88214359c7933'>link</a></figcaption><div class='code-highlight'><pre class='code-highlight-pre'><div data-line='1' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="kd">function</span> <span class="nx">route</span><span class="p">(</span><span class="nx">pathname</span><span class="p">,</span> <span class="nx">routes</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='2' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;About to route a request for &quot;</span> <span class="o">+</span> <span class="nx">pathname</span><span class="p">)</span>
</div></div><div data-line='3' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">routes</span><span class="p">[</span><span class="nx">pathname</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">&#x7b;</span>
</div></div><div data-line='4' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="nx">routes</span><span class="p">[</span><span class="nx">pathname</span><span class="p">](</span><span class="nx">res</span><span class="p">);</span>
</div></div><div data-line='5' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">&#x7d;</span> <span class="k">else</span> <span class="p">&#x7b;</span>
</div></div><div data-line='6' class='code-highlight-row numbered'><div class='code-highlight-line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;No request found for &quot;</span> <span class="o">+</span> <span class="nx">pathname</span><span class="p">)</span>
</div></div><div data-line='7' class='code-highlight-row numbered'><div class='code-highlight-line'>    <span class="p">&#x7d;</span>
</div></div><div data-line='8' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="p">&#x7d;</span>
</div></div><div data-line='9' class='code-highlight-row numbered'><div class='code-highlight-line'> </div></div><div data-line='10' class='code-highlight-row numbered'><div class='code-highlight-line'><span class="nx">exports</span><span class="p">.</span><span class="nx">route</span> <span class="o">=</span> <span class="nx">route</span><span class="p">;</span></div></div></pre></div></figure></p>

<p>И index.js, в котором будут подключены нужные файлы и сконфигурированы файлы.</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./server&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./router&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooController</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./fooController&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">routes</span><span class="p">[</span><span class="s2">&quot;/index&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fooController</span><span class="p">.</span><span class="nx">index</span><span class="p">;</span>
</span><span class='line'><span class="nx">routes</span><span class="p">[</span><span class="s2">&quot;/show&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fooController</span><span class="p">.</span><span class="nx">show</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">example</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">route</span><span class="p">,</span> <span class="nx">routes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Как видно уже получается пачка кода, а ничего почти не сделано.</p>

<h3>Сколько времени уйдёт на создание мощного RESTful JSON API c Sails?</h3>

<p>Ровно столько, сколько займут эти команды:</p>

<p><code>$ sails new jsonapi</code></p>

<p><code>$ cd jsonapi</code></p>

<p><code>$ sails generate user</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Настройка базы данных в Sails]]></title>
    <link href="http://paveldemyanenko.github.io/blog/2015/01/09/nastroika-bazy-dannykh-v-sails/"/>
    <updated>2015-01-09T17:50:10+03:00</updated>
    <id>http://paveldemyanenko.github.io/blog/2015/01/09/nastroika-bazy-dannykh-v-sails</id>
    <content type="html"><![CDATA[<p>В Sails приложениях адаптеры выступают посредниками между приложением и базой данных. Конкретнее, как плагины для <a href="https://github.com/balderdashy/waterline">Waterline</a>, <a href="https://ru.wikipedia.org/wiki/ORM">ORM</a> для работы с базой данных. Настройка этих адаптеров происходит в файле config/connections.js</p>

<!--more-->


<p>Файл connection.js позволяет создавать разные глобальные настройки, которые можно подмиксовывоть в модели. Опция по умолчанаю будет автоматически подмиксовываться в модель, если в ней не указан адаптер. Важно помнить, что когда указывается адаптер в моделе, то перезаписывается настройка по умолчанию.</p>

<p>Важно отметить, что если используются секретные данные (passwords, API keys), то их нужно назначать в файле config/local.js, он добвлен в .gitignore по умолчанию.</p>

<figure class='code'><figcaption><span>local_example.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">connections</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">mysql</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;sails-mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">user</span><span class="o">:</span> <span class="s1">&#39;tutorialuser&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">database</span><span class="o">:</span> <span class="s1">&#39;tutorialdb&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">charset</span><span class="o">:</span> <span class="s1">&#39;utf8&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">models</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">connection</span><span class="o">:</span> <span class="s1">&#39;mysql&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">session</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="mi">1337</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">environment</span><span class="o">:</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">level</span><span class="o">:</span> <span class="s1">&#39;info&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>connection.js</span><a href='http://sailsjs.org/#/documentation/anatomy/myApp/config/connections.js.html'>Sails Documentation </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Connections</span>
</span><span class='line'><span class="cm">* (sails.config.connections)</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* `Connections` are like &quot;saved settings&quot; for your adapters.  What&#39;s the difference between</span>
</span><span class='line'><span class="cm">* a connection and an adapter, you might ask?  An adapter (e.g. `sails-mysql`) is generic--</span>
</span><span class='line'><span class="cm">* it needs some additional information to work (e.g. your database host, password, user, etc.)</span>
</span><span class='line'><span class="cm">* A `connection` is that additional information.</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* Each model must have a `connection` property (a string) which is references the name of one</span>
</span><span class='line'><span class="cm">* of these connections.  If it doesn&#39;t, the default `connection` configured in `config/models.js`</span>
</span><span class='line'><span class="cm">* will be applied.  Of course, a connection can (and usually is) shared by multiple models.</span>
</span><span class='line'><span class="cm">* .</span>
</span><span class='line'><span class="cm">* Note: If you&#39;re using version control, you should put your passwords/api keys</span>
</span><span class='line'><span class="cm">* in `config/local.js`, environment variables, or use another strategy.</span>
</span><span class='line'><span class="cm">* (this is to prevent you inadvertently sensitive credentials up to your repository.)</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* For more information on configuration, check out:</span>
</span><span class='line'><span class="cm">* http://links.sailsjs.org/docs/config/connections</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">connections</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Local disk storage for DEVELOPMENT ONLY</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// Installed by default.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="nx">localDiskDb</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;sails-disk&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MySQL is the world&#39;s most popular relational database.</span>
</span><span class='line'>  <span class="c1">// http://en.wikipedia.org/wiki/MySQL</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// Run:</span>
</span><span class='line'>  <span class="c1">// npm install sails-mysql</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="nx">someMysqlServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;sails-mysql&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;YOUR_MYSQL_SERVER_HOSTNAME_OR_IP_ADDRESS&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user</span><span class="o">:</span> <span class="s1">&#39;YOUR_MYSQL_USER&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;YOUR_MYSQL_PASSWORD&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">database</span><span class="o">:</span> <span class="s1">&#39;YOUR_MYSQL_DB&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// MongoDB is the leading NoSQL database.</span>
</span><span class='line'>  <span class="c1">// http://en.wikipedia.org/wiki/MongoDB</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// Run:</span>
</span><span class='line'>  <span class="c1">// npm install sails-mongo</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="nx">someMongodbServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;sails-mongo&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">27017</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// user: &#39;username&#39;,</span>
</span><span class='line'>    <span class="c1">// password: &#39;password&#39;,</span>
</span><span class='line'>    <span class="c1">// database: &#39;your_mongo_db_name_here&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// PostgreSQL is another officially supported relational database.</span>
</span><span class='line'>  <span class="c1">// http://en.wikipedia.org/wiki/PostgreSQL</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// Run:</span>
</span><span class='line'>  <span class="c1">// npm install sails-postgresql</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="nx">somePostgresqlServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;sails-postgresql&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;YOUR_POSTGRES_SERVER_HOSTNAME_OR_IP_ADDRESS&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user</span><span class="o">:</span> <span class="s1">&#39;YOUR_POSTGRES_USER&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;YOUR_POSTGRES_PASSWORD&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">database</span><span class="o">:</span> <span class="s1">&#39;YOUR_POSTGRES_DB&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// More adapters:</span>
</span><span class='line'>  <span class="c1">// https://github.com/balderdashy/sails</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>local.js</span><a href='http://sailsjs.org/#/documentation/anatomy/myApp/config/local.js.html'>Sails Documentation </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Local environment settings</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* While you&#39;re DEVELOPING your app, this config file should include</span>
</span><span class='line'><span class="cm">* any settings specifically for your development computer (db passwords, etc.)</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* When you&#39;re ready to deploy your app in PRODUCTION, you can always use this file</span>
</span><span class='line'><span class="cm">* for configuration options specific to the server where the app will be deployed.</span>
</span><span class='line'><span class="cm">* But environment variables are usually the best way to handle production settings.</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* PLEASE NOTE:</span>
</span><span class='line'><span class="cm">*        This file is included in your .gitignore, so if you&#39;re using git</span>
</span><span class='line'><span class="cm">*        as a version control solution for your Sails app, keep in mind that</span>
</span><span class='line'><span class="cm">*        this file won&#39;t be committed to your repository!</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">*        Good news is, that means you can specify configuration for your local</span>
</span><span class='line'><span class="cm">*        machine in this file without inadvertently committing personal information</span>
</span><span class='line'><span class="cm">*        (like database passwords) to the repo.  Plus, this prevents other members</span>
</span><span class='line'><span class="cm">*        of your team from commiting their local configuration changes on top of yours.</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* For more information, check out:</span>
</span><span class='line'><span class="cm">* http://links.sailsjs.org/docs/config/local</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Your SSL certificate and key, if you want to be able to serve HTTP responses</span>
</span><span class='line'>  <span class="c1">// over https:// and/or use websockets over the wss:// protocol</span>
</span><span class='line'>  <span class="c1">// (recommended for HTTP, strongly encouraged for WebSockets)</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// In this example, we&#39;ll assume you created a folder in your project, `config/ssl`</span>
</span><span class='line'>  <span class="c1">// and dumped your certificate/key files there:</span>
</span><span class='line'>  <span class="c1">// ssl: {</span>
</span><span class='line'>  <span class="c1">//   ca: require(&#39;fs&#39;).readFileSync(__dirname + &#39;./ssl/my_apps_ssl_gd_bundle.crt&#39;),</span>
</span><span class='line'>  <span class="c1">//   key: require(&#39;fs&#39;).readFileSync(__dirname + &#39;./ssl/my_apps_ssl.key&#39;),</span>
</span><span class='line'>  <span class="c1">//   cert: require(&#39;fs&#39;).readFileSync(__dirname + &#39;./ssl/my_apps_ssl.crt&#39;)</span>
</span><span class='line'>  <span class="c1">// },</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The `port` setting determines which TCP port your app will be deployed on</span>
</span><span class='line'>  <span class="c1">// Ports are a transport-layer concept designed to allow many different</span>
</span><span class='line'>  <span class="c1">// networking applications run at the same time on a single computer.</span>
</span><span class='line'>  <span class="c1">// More about ports: http://en.wikipedia.org/wiki/Port_(computer_networking)</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// By default, if it&#39;s set, Sails uses the `PORT` environment variable.</span>
</span><span class='line'>  <span class="c1">// Otherwise it falls back to port 1337.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// In production, you&#39;ll probably want to change this setting</span>
</span><span class='line'>  <span class="c1">// to 80 (http://) or 443 (https://) if you have an SSL certificate</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">1337</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The runtime &quot;environment&quot; of your Sails app is either &#39;development&#39; or &#39;production&#39;.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// In development, your Sails app will go out of its way to help you</span>
</span><span class='line'>  <span class="c1">// (for instance you will receive more descriptive error and debugging output)</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// In production, Sails configures itself (and its dependencies) to optimize performance.</span>
</span><span class='line'>  <span class="c1">// You should always put your app in production mode before you deploy it to a server-</span>
</span><span class='line'>  <span class="c1">// This helps ensure that your Sails app remains stable, performant, and scalable.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// By default, Sails sets its environment using the `NODE_ENV` environment variable.</span>
</span><span class='line'>  <span class="c1">// If NODE_ENV is not set, Sails will run in the &#39;development&#39; environment.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">environment</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sails Blueprint API]]></title>
    <link href="http://paveldemyanenko.github.io/blog/2015/01/07/sails-blueprint-api/"/>
    <updated>2015-01-07T22:52:43+03:00</updated>
    <id>http://paveldemyanenko.github.io/blog/2015/01/07/sails-blueprint-api</id>
    <content type="html"><![CDATA[<p>Blueprint API состоит из blueprint routes и blueprint actions, которые создают логику для <a href="https://ru.wikipedia.org/wiki/REST">RESTful JSON API</a> каждый раз, когда создается модель и контроллер.</p>

<p>Например, если создать модель пользователя и соответствующий контроллер в проекте, то blueprint api позволит сразу создать пользователя /user/create?name=vanya и просмотреть массив созданных пользователей /user, не написав для этого ни одной строчки кода.</p>

<p>Blueprints удобно использовать при прототипирование, но и в продакшене тоже являются сильным инструментом так как могут быть расширены.</p>

<!--more-->


<h3>Blueprint Routes</h3>

<p>Когда запускается приложение с помощью <code>sails lift</code> и blueprints включены, то фреймворк инспектирует ваши контроллеры, модели и конфигурации, чтобы назанчить необходимые роуты автоматически. Эти неявные роуты (иногда называемые &ldquo;тени&rdquo;) позволяют приложению реагировать на те или иные запросы без необходимости привязки этих роутов вручную в сonfig/routes.js файле. По умолчанию &ldquo;тени&rdquo; указывают на соответствующие действий (см. &ldquo;blueprint actions&rdquo; ниже), любое из которых может быть переопределенно своим кодом.</p>

<p>Есть три вида blueprint роутов в Sails:</p>

<p><strong>RESTful routes</strong>, когда роут всегда /:modelIdentity или /:modelIdentity/:id. Эти роуты использует HTTP методы POST, DELETE и так далее.</p>

<p><strong>Shortcut routes</strong>, когда действие содержится в роуте. Например, /user/create?name=vanya создаст нового пользователя, в то время как user/update/1?name=pavel обновит запись для первого пользователя. Эти роуты отвечают только на GET запросы. Полезная фича для дева, но в продакшене лучше выключить.</p>

<p><strong>Action routes</strong>, которые автоматически создаются для кастомных контроллеров. Например, есть контроллер FooController.js с bar методом, тогда роут /foo/bar будет автоматически создан, если blueprints включены. В отличие от остальных типов роутов эти не требуют, чтобы у контроллера была соответствующая модель.</p>

<p><a href="http://sailsjs.org/#/documentation/reference/sails.config/sails.config.blueprints.html">Подраздел конфигураций</a>, в том числе, как включить/отключить различные роуты.</p>

<h3>Blueprint Actions</h3>

<p>Blueprint actions (не путать с blueprint action routes) — это общие методы, направленные на работу с любым контроллером, который имеет модель с таким же именем. Можно думать о них, как о поведение по умолчанию для приложения. Например, если существует модель User.js и соответствующий контроллер UserController.js, то методы create, update, find, destroy, populate, add, remove будут доступны без необходимости писать их.</p>

<p>По умолчанию RESTful routes и shortcut routes привязаны к соответствующим общим методам. Тем не менее, любой такой метод может быть переопределен для конкретного контроллера путем создания этого метода в файле контроллера (FooController.find). Кроме того можно переопределить методы во всем приложение, создав кастомные методы (api/blueprints/create.js).</p>

<p>Текущая версия Sails поддерживает следующие методы:</p>

<ol>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Find.html">find</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/FindOne.html">findOne</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Create.html">create</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Update.html">update</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Destroy.html">destroy</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Populate.html">populate</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Add.html">add</a></li>
<li><a href="http://sailsjs.org/#/documentation/reference/blueprint-api/Remove.html">remove</a></li>
</ol>


<p>Расмотренные методы blueprint API один в один, как методы выше.</p>

<h3>Переопределение blueprints</h3>

<p>Чтобы переопределить blueprints в Sails v0.10 можно создать папку api/blueprints и добавить туда свои файлы (например, find.js, create.js и т.п). Можно посмотреть на код по умолчанию для начала.</p>

<p><strong>Важно</strong>: Все файлы должны быть в нижнем регистре! По умолчанию действия, например, findOne.js, но в /api/blueprints должны быть findone.js.</p>

<p>Добавление пользовательских blueprint также поддерживаются, но они в настоящее время не получают автоматическую привязку к роутам. Если создаеть /blueprints/foo.js файл, то нужно связать роуты до него в /config/routes.js файле, например:</p>

<p>GET /myRoute&#8217;: {blueprint: &lsquo;foo&rsquo;}</p>

<p>Отключение blueprints контроллера:</p>

<p>Также можно переопределить любые настройки из config/blueprints.js для каждого контроллера путем осоздания объекта _config в контроллере и присвоение ему конфигурации с переопределением настроек.</p>

<figure class='code'><figcaption><span>_config.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_config</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">actions</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">shortcuts</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">rest</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
